apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "home-assistant.fullname" . }}
  labels:
    {{- include "home-assistant.labels" . | nindent 4 }}
    ha-component: homeassistant
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "home-assistant.selectorLabels" . | nindent 6 }}
      ha-component: homeassistant
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "home-assistant.selectorLabels" . | nindent 8 }}
        ha-component: homeassistant
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      hostNetwork: true
      {{- with .Values.priorityClassName.homeassistant }}
      priorityClassName: {{ . | quote }}
      {{- end }}
      dnsPolicy: ClusterFirstWithHostNet
      dnsConfig:
        nameservers:
          {{- toYaml .Values.additionalDNSServers | nindent 10 }}
      serviceAccountName: {{ include "home-assistant.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: jinja-renderer
          securityContext:
            {{- toYaml .Values.securityContexts.initJinjaRenderer | nindent 12 }}
          image: "{{ .Values.images.initJinjaRenderer.repository }}:{{ .Values.images.initJinjaRenderer.tag }}"
          imagePullPolicy: {{ .Values.images.initJinjaRenderer.pullPolicy }}
          args:
            - --values
            - /values/*.yaml
            - --templates-dir
            - /templates
            - --output-dir
            - /config
          resources:
            {{- toYaml .Values.resources.initJinjaRenderer | nindent 12 }}
          {{- if or .Values.config.postgresql.enabled }}
          env:
            - name: JINJA_POSTGRESQL_USERNAME
              valueFrom:
                secretKeyRef:
                  {{- if .Values.zalandoPostgresql.enabled }}
                  name: homeassistant.home-assistant-db.credentials.postgresql.acid.zalan.do
                  key: username
                  {{- else }}
                  name: {{ include "home-assistant.fullname" . }}
                  key: postgresql_username
                  {{- end }}
            - name: JINJA_POSTGRESQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ include "home-assistant.fullname" . }}
                  key: postgresql-host
            - name: JINJA_POSTGRESQL_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ include "home-assistant.fullname" . }}
                  key: postgresql-port
            - name: JINJA_POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.zalandoPostgresql.enabled }}
                  name: homeassistant.home-assistant-db.credentials.postgresql.acid.zalan.do
                  key: password
                  {{- else }}
                  name: {{ include "home-assistant.fullname" . }}
                  key: postgresql_password
                  {{- end }}
          {{- end }}
          volumeMounts:
            - name: templates
              mountPath: /templates
              readOnly: true
            - name: values
              mountPath: /values
              readOnly: true
            - name: config
              mountPath: "/config"
          {{- if .Values.config.postgresql.enabled }}
        - name: wait-for-postgres
          securityContext:
            {{- toYaml .Values.securityContexts.initWaitForPostgres | nindent 12 }}
          image: "{{ .Values.images.initWaitForPostgres.repository }}:{{ .Values.images.initWaitForPostgres.tag }}"
          imagePullPolicy: {{ .Values.images.initWaitForPostgres.pullPolicy }}
          resources:
            {{- toYaml .Values.resources.initWaitForPostgres | nindent 12 }}
          command:
            - /usr/local/bin/bash
          args:
            - -c
            - |
                echo "Waiting for ${POSTGRESQL_HOST}:${POSTGRESQL_PORT}"
                while ! timeout 1 bash -c "cat < /dev/null > /dev/tcp/${POSTGRESQL_HOST}/${POSTGRESQL_PORT}"; do
                  sleep 1
                  echo "."
                done
                echo "OK"
          env:
            - name: POSTGRESQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ include "home-assistant.fullname" . }}
                  key: postgresql-host
            - name: POSTGRESQL_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ include "home-assistant.fullname" . }}
                  key: postgresql-port
          {{- end }}
      containers:
        - name: homeassistant
          securityContext:
            {{- toYaml .Values.securityContexts.homeassistant | nindent 12 }}
          image: "{{ .Values.images.homeassistant.repository }}:{{ .Values.images.homeassistant.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.images.homeassistant.pullPolicy }}
          ports:
            - name: http
              containerPort: 8123
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - sh
              args:
                - -c
                - |
                  [[ "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8123)" == "200" ]]
            initialDelaySeconds: 1
            periodSeconds: 5
          livenessProbe:
            exec:
              command:
                - sh
              args:
                - -c
                - |
                  [[ "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8123)" == "200" ]]
            initialDelaySeconds: 1
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources.homeassistant | nindent 12 }}
          env:
            - name: PATH_TO_YOUR_CONFIG
              value: /config/configuration.yaml
            - name: TZ
              value: "Poland"
          volumeMounts:
            - name: config
              mountPath: "/config"
      {{- with .Values.nodeSelector.homeassistant }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity.homeassistant }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations.homeassistant }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: templates
          configMap:
            name: {{ template "home-assistant.fullname" . }}-templates
        - name: values
          configMap:
            name: {{ template "home-assistant.fullname" . }}-values
        - name: config
      {{- if .Values.persistence.homeassistant.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.homeassistant.existingClaim | default (include "home-assistant.fullname" .) }}
      {{- else }}
          emptyDir: {}
      {{- end -}}
      {{- if .Values.extraVolumes }}
{{ tpl .Values.extraVolumes . | indent 6 }}
      {{- end }}
